buildscript {
    configurations['classpath'].resolutionStrategy.eachDependency {
        if (requested.group == 'org.jooq') {
            useVersion jooqVersion
        }
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.kapt" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.allopen" version "${kotlinVersion}"
    id "application"
    id "com.google.cloud.tools.jib" version "${jibVersion}"
    id "io.gitlab.arturbosch.detekt" version "${detektVersion}"
    id "jacoco"
    id "nu.studer.jooq" version "${jooqPluginVersion}"
    id "com.palantir.git-version" version "${palantirGitVersion}"
    id "com.github.ben-manes.versions" version "${checkUpdatesVersion}"
    id "io.micronaut.application" version "${micronautPluginVersion}"
    id "org.jlleitschuh.gradle.ktlint" version "${ktLintPluginVersion}"
    id "org.flywaydb.flyway" version "${flywayPluginVersion}"
}

version gitVersion()
group "com.kuvaszuptime.kuvasz"
def javaTargetVersion = "11"

repositories {
    gradlePluginPortal()
    mavenCentral()
}

micronaut {
    version micronautVersion
    runtime "netty"
    testRuntime "kotest"
    processing {
        incremental true
        annotations "com.kuvaszuptime.kuvasz.*"
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    kapt("io.micronaut.openapi:micronaut-openapi")
    kapt("io.micronaut.security:micronaut-security-annotations")
    kapt("io.micronaut:micronaut-graal")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
    compileOnly("org.graalvm.nativeimage:svm")
    implementation "nu.studer:gradle-jooq-plugin:$jooqPluginVersion"
    implementation("ch.qos.logback:logback-classic")
    implementation("io.arrow-kt:arrow-core-data:${arrowDataVersion}")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.kotlin:micronaut-kotlin-extension-functions")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut.rxjava2:micronaut-rxjava2")
    implementation("io.micronaut.rxjava2:micronaut-rxjava2-http-client")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.sql:micronaut-jooq")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("javax.annotation:javax.annotation-api")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinCoroutinesVersion}")
    implementation("org.postgresql:postgresql:${postgresVersion}")
    implementation("org.simplejavamail:batch-module:${simpleJavaMailVersion}")
    implementation("org.simplejavamail:simple-java-mail:${simpleJavaMailVersion}")
    implementation("org.zalando:logbook-core:$logbookVersion")
    implementation("org.zalando:logbook-json:$logbookVersion")
    implementation("org.zalando:logbook-netty:$logbookVersion")
    jooqGenerator("org.postgresql:postgresql:${postgresVersion}")
    testImplementation("io.mockk:mockk:${mockkVersion}")
    testImplementation("org.testcontainers:postgresql:${postgresTestContainersVersion}")
}

test.classpath += configurations.developmentOnly

mainClassName = "com.kuvaszuptime.kuvasz.Application"

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        csv.enabled false
    }
    classDirectories.setFrom(
            fileTree("build/classes/kotlin/main") {
                exclude("com/kuvaszuptime/kuvasz/Application.class")
            }
    )
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(
                fileTree("build/classes/kotlin/main") {
                    exclude("com/kuvaszuptime/kuvasz/Application.class")
                }
        )
    }
    violationRules {
        rule {
            limit {
                counter = "INSTRUCTION"
                value = "COVEREDRATIO"
                minimum = 0.9
            }
        }
    }
}

check {
    dependsOn("jacocoTestCoverageVerification")
}

detekt {
    input = files(
            "src/main/kotlin",
            "src/test/kotlin"
    )
}

ktlint {
    version.set(ktLintVersion)
    disabledRules = ["no-wildcard-imports"]
}

build {
    dependsOn("detekt")
}

// use JUnit 5 platform
test {
    useJUnitPlatform {
        systemProperties("micronaut.environments": "test")
    }
    finalizedBy("jacocoTestReport")
}

java {
    sourceCompatibility = JavaVersion.toVersion(javaTargetVersion)
}

allOpen {
    annotation("jakarta.inject.Singleton")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = javaTargetVersion
        //Will retain parameter names for Java reflection
        javaParameters = true
        freeCompilerArgs += "-Xuse-experimental=kotlin.time.ExperimentalTime"
    }
    finalizedBy("updateApiDoc")
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = javaTargetVersion
        javaParameters = true
        freeCompilerArgs += "-Xuse-experimental=kotlin.time.ExperimentalTime"
    }
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs(
            "-XX:TieredStopAtLevel=1",
            "-Dcom.sun.management.jmxremote",
            "-Xms64M",
            "-Xmx128M",
            "-Dlogback.configurationFile=logback-dev.xml"
//            "-agentlib:native-image-agent=experimental-class-loader-support,config-output-dir=./tmp",
//            "-Dorg.graalvm.nativeimage.imagecode=agent"
    )
    systemProperty("micronaut.environments", "dev")
    if (gradle.startParameter.continuous) {
        systemProperties(
                "micronaut.io.watch.restart": "true",
                "micronaut.io.watch.enabled": "true",
                "micronaut.io.watch.paths": "src/main"
        )
    }
}

jib {
    from {
        image = "gcr.io/distroless/java:11"
    }
    to {
        image = "kuvaszmonitoring/kuvasz:${version}"
        tags = ["latest"]
    }
    container {
        environment = ["JAVA_TOOL_OPTIONS": "-Xms64M -Xmx128M"]
    }
}

task pushNativeImage(type: Exec) {
    workingDir projectDir
    commandLine "sh", "./docker-push-native.sh", "-t${version}-native"
}

task releaseDockerImages() {
    dependsOn("jib")
    dependsOn("dockerBuildNative")
    dependsOn("pushNativeImage")
    tasks.findByName("dockerBuildNative").mustRunAfter "jib"
    tasks.findByName("pushNativeImage").mustRunAfter "dockerBuildNative"
}

task updateApiDoc(type: Copy) {
    dependsOn("kaptKotlin")
    from "$buildDir/tmp/kapt3/classes/main/META-INF/swagger/kuvasz-latest.yml"
    into "$projectDir/docs/api-doc"
}

def dbUrl = "jdbc:postgresql://localhost:5432/postgres"
def dbUser = "postgres"
def dbPassword = System.getenv("DB_PASSWORD") ?: "pass"
def dbSchema = "kuvasz"
def dbDriver = "org.postgresql.Driver"

jooq {
    version = jooqVersion
    configurations {
        main {
            generateSchemaSourceOnCompilation = false
            generationTool {
                jdbc {
                    url = dbUrl
                    user = dbUser
                    password = dbPassword
                    driver = "org.postgresql.Driver"
                }
                generator {
                    target {
                        directory = "src/jooq/java"
                        packageName = "com.kuvaszuptime.kuvasz"
                    }
                    generate {
                        validationAnnotations = true
                        jpaAnnotations = true
                        daos = true
                        pojosEqualsAndHashCode = true
                        fluentSetters = true
                    }
                    database {
                        inputSchema = dbSchema
                        outputSchemaToDefault = true
                        excludes = "flyway_schema_history"
                    }
                    strategy {
                        name = null
                        matchers {
                            tables {
                                table {
                                    pojoClass {
                                        transform = "PASCAL"
                                        expression = "\$0_Pojo"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

flyway {
    url = dbUrl
    user = dbUser
    password = dbPassword
    schemas = [dbSchema]
    driver = dbDriver
}

tasks.named("dockerfileNative") {
    args("-Xms64M ", "-Xmx128m", "-Dio.netty.allocator.maxOrder=8")
}

tasks.named("dockerBuildNative") {
    images = ["kuvaszmonitoring/kuvasz:$version-native", "kuvaszmonitoring/kuvasz:latest-native"]
}
