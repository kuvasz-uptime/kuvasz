/*
 * This file is generated by jOOQ.
 */
package com.kuvaszuptime.kuvasz;


import com.kuvaszuptime.kuvasz.tables.LatencyLog;
import com.kuvaszuptime.kuvasz.tables.Monitor;
import com.kuvaszuptime.kuvasz.tables.SslEvent;
import com.kuvaszuptime.kuvasz.tables.UptimeEvent;
import com.kuvaszuptime.kuvasz.tables.records.LatencyLogRecord;
import com.kuvaszuptime.kuvasz.tables.records.MonitorRecord;
import com.kuvaszuptime.kuvasz.tables.records.SslEventRecord;
import com.kuvaszuptime.kuvasz.tables.records.UptimeEventRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * the default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<LatencyLogRecord> LATENCY_LOG_PKEY = Internal.createUniqueKey(LatencyLog.LATENCY_LOG, DSL.name("latency_log_pkey"), new TableField[] { LatencyLog.LATENCY_LOG.ID }, true);
    public static final UniqueKey<MonitorRecord> MONITOR_PKEY = Internal.createUniqueKey(Monitor.MONITOR, DSL.name("monitor_pkey"), new TableField[] { Monitor.MONITOR.ID }, true);
    public static final UniqueKey<MonitorRecord> UNIQUE_MONITOR_NAME = Internal.createUniqueKey(Monitor.MONITOR, DSL.name("unique_monitor_name"), new TableField[] { Monitor.MONITOR.NAME }, true);
    public static final UniqueKey<SslEventRecord> SSL_EVENT_KEY = Internal.createUniqueKey(SslEvent.SSL_EVENT, DSL.name("ssl_event_key"), new TableField[] { SslEvent.SSL_EVENT.MONITOR_ID, SslEvent.SSL_EVENT.STATUS, SslEvent.SSL_EVENT.ENDED_AT }, true);
    public static final UniqueKey<SslEventRecord> SSL_EVENT_PKEY = Internal.createUniqueKey(SslEvent.SSL_EVENT, DSL.name("ssl_event_pkey"), new TableField[] { SslEvent.SSL_EVENT.ID }, true);
    public static final UniqueKey<UptimeEventRecord> UPTIME_EVENT_KEY = Internal.createUniqueKey(UptimeEvent.UPTIME_EVENT, DSL.name("uptime_event_key"), new TableField[] { UptimeEvent.UPTIME_EVENT.MONITOR_ID, UptimeEvent.UPTIME_EVENT.STATUS, UptimeEvent.UPTIME_EVENT.ENDED_AT }, true);
    public static final UniqueKey<UptimeEventRecord> UPTIME_EVENT_PKEY = Internal.createUniqueKey(UptimeEvent.UPTIME_EVENT, DSL.name("uptime_event_pkey"), new TableField[] { UptimeEvent.UPTIME_EVENT.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<LatencyLogRecord, MonitorRecord> LATENCY_LOG__LATENCY_LOG_MONITOR_ID_FKEY = Internal.createForeignKey(LatencyLog.LATENCY_LOG, DSL.name("latency_log_monitor_id_fkey"), new TableField[] { LatencyLog.LATENCY_LOG.MONITOR_ID }, Keys.MONITOR_PKEY, new TableField[] { Monitor.MONITOR.ID }, true);
    public static final ForeignKey<SslEventRecord, MonitorRecord> SSL_EVENT__SSL_EVENT_MONITOR_ID_FKEY = Internal.createForeignKey(SslEvent.SSL_EVENT, DSL.name("ssl_event_monitor_id_fkey"), new TableField[] { SslEvent.SSL_EVENT.MONITOR_ID }, Keys.MONITOR_PKEY, new TableField[] { Monitor.MONITOR.ID }, true);
    public static final ForeignKey<UptimeEventRecord, MonitorRecord> UPTIME_EVENT__UPTIME_EVENT_MONITOR_ID_FKEY = Internal.createForeignKey(UptimeEvent.UPTIME_EVENT, DSL.name("uptime_event_monitor_id_fkey"), new TableField[] { UptimeEvent.UPTIME_EVENT.MONITOR_ID }, Keys.MONITOR_PKEY, new TableField[] { Monitor.MONITOR.ID }, true);
}
