/*
 * This file is generated by jOOQ.
 */
package com.kuvaszuptime.kuvasz.tables.pojos;


import com.kuvaszuptime.kuvasz.enums.HttpMethod;

import java.io.Serializable;
import java.time.OffsetDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Monitor implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long id;
    private String name;
    private String url;
    private Integer uptimeCheckInterval;
    private Boolean enabled;
    private OffsetDateTime createdAt;
    private OffsetDateTime updatedAt;
    private Boolean sslCheckEnabled;
    private String pagerdutyIntegrationKey;
    private Boolean latencyHistoryEnabled;
    private Boolean followRedirects;
    private Boolean forceNoCache;
    private HttpMethod requestMethod;

    public Monitor() {}

    public Monitor(Monitor value) {
        this.id = value.id;
        this.name = value.name;
        this.url = value.url;
        this.uptimeCheckInterval = value.uptimeCheckInterval;
        this.enabled = value.enabled;
        this.createdAt = value.createdAt;
        this.updatedAt = value.updatedAt;
        this.sslCheckEnabled = value.sslCheckEnabled;
        this.pagerdutyIntegrationKey = value.pagerdutyIntegrationKey;
        this.latencyHistoryEnabled = value.latencyHistoryEnabled;
        this.followRedirects = value.followRedirects;
        this.forceNoCache = value.forceNoCache;
        this.requestMethod = value.requestMethod;
    }

    public Monitor(
        Long id,
        String name,
        String url,
        Integer uptimeCheckInterval,
        Boolean enabled,
        OffsetDateTime createdAt,
        OffsetDateTime updatedAt,
        Boolean sslCheckEnabled,
        String pagerdutyIntegrationKey,
        Boolean latencyHistoryEnabled,
        Boolean followRedirects,
        Boolean forceNoCache,
        HttpMethod requestMethod
    ) {
        this.id = id;
        this.name = name;
        this.url = url;
        this.uptimeCheckInterval = uptimeCheckInterval;
        this.enabled = enabled;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.sslCheckEnabled = sslCheckEnabled;
        this.pagerdutyIntegrationKey = pagerdutyIntegrationKey;
        this.latencyHistoryEnabled = latencyHistoryEnabled;
        this.followRedirects = followRedirects;
        this.forceNoCache = forceNoCache;
        this.requestMethod = requestMethod;
    }

    /**
     * Getter for <code>kuvasz.monitor.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>kuvasz.monitor.id</code>.
     */
    public Monitor setId(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>kuvasz.monitor.name</code>. Monitor's name
     */
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>kuvasz.monitor.name</code>. Monitor's name
     */
    public Monitor setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>kuvasz.monitor.url</code>. URL to check
     */
    public String getUrl() {
        return this.url;
    }

    /**
     * Setter for <code>kuvasz.monitor.url</code>. URL to check
     */
    public Monitor setUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Getter for <code>kuvasz.monitor.uptime_check_interval</code>. Uptime
     * checking interval in seconds
     */
    public Integer getUptimeCheckInterval() {
        return this.uptimeCheckInterval;
    }

    /**
     * Setter for <code>kuvasz.monitor.uptime_check_interval</code>. Uptime
     * checking interval in seconds
     */
    public Monitor setUptimeCheckInterval(Integer uptimeCheckInterval) {
        this.uptimeCheckInterval = uptimeCheckInterval;
        return this;
    }

    /**
     * Getter for <code>kuvasz.monitor.enabled</code>. Flag to toggle the
     * monitor
     */
    public Boolean getEnabled() {
        return this.enabled;
    }

    /**
     * Setter for <code>kuvasz.monitor.enabled</code>. Flag to toggle the
     * monitor
     */
    public Monitor setEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Getter for <code>kuvasz.monitor.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>kuvasz.monitor.created_at</code>.
     */
    public Monitor setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>kuvasz.monitor.updated_at</code>.
     */
    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>kuvasz.monitor.updated_at</code>.
     */
    public Monitor setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>kuvasz.monitor.ssl_check_enabled</code>.
     */
    public Boolean getSslCheckEnabled() {
        return this.sslCheckEnabled;
    }

    /**
     * Setter for <code>kuvasz.monitor.ssl_check_enabled</code>.
     */
    public Monitor setSslCheckEnabled(Boolean sslCheckEnabled) {
        this.sslCheckEnabled = sslCheckEnabled;
        return this;
    }

    /**
     * Getter for <code>kuvasz.monitor.pagerduty_integration_key</code>.
     */
    public String getPagerdutyIntegrationKey() {
        return this.pagerdutyIntegrationKey;
    }

    /**
     * Setter for <code>kuvasz.monitor.pagerduty_integration_key</code>.
     */
    public Monitor setPagerdutyIntegrationKey(String pagerdutyIntegrationKey) {
        this.pagerdutyIntegrationKey = pagerdutyIntegrationKey;
        return this;
    }

    /**
     * Getter for <code>kuvasz.monitor.latency_history_enabled</code>.
     */
    public Boolean getLatencyHistoryEnabled() {
        return this.latencyHistoryEnabled;
    }

    /**
     * Setter for <code>kuvasz.monitor.latency_history_enabled</code>.
     */
    public Monitor setLatencyHistoryEnabled(Boolean latencyHistoryEnabled) {
        this.latencyHistoryEnabled = latencyHistoryEnabled;
        return this;
    }

    /**
     * Getter for <code>kuvasz.monitor.follow_redirects</code>.
     */
    public Boolean getFollowRedirects() {
        return this.followRedirects;
    }

    /**
     * Setter for <code>kuvasz.monitor.follow_redirects</code>.
     */
    public Monitor setFollowRedirects(Boolean followRedirects) {
        this.followRedirects = followRedirects;
        return this;
    }

    /**
     * Getter for <code>kuvasz.monitor.force_no_cache</code>.
     */
    public Boolean getForceNoCache() {
        return this.forceNoCache;
    }

    /**
     * Setter for <code>kuvasz.monitor.force_no_cache</code>.
     */
    public Monitor setForceNoCache(Boolean forceNoCache) {
        this.forceNoCache = forceNoCache;
        return this;
    }

    /**
     * Getter for <code>kuvasz.monitor.request_method</code>.
     */
    public HttpMethod getRequestMethod() {
        return this.requestMethod;
    }

    /**
     * Setter for <code>kuvasz.monitor.request_method</code>.
     */
    public Monitor setRequestMethod(HttpMethod requestMethod) {
        this.requestMethod = requestMethod;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Monitor other = (Monitor) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.url == null) {
            if (other.url != null)
                return false;
        }
        else if (!this.url.equals(other.url))
            return false;
        if (this.uptimeCheckInterval == null) {
            if (other.uptimeCheckInterval != null)
                return false;
        }
        else if (!this.uptimeCheckInterval.equals(other.uptimeCheckInterval))
            return false;
        if (this.enabled == null) {
            if (other.enabled != null)
                return false;
        }
        else if (!this.enabled.equals(other.enabled))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.sslCheckEnabled == null) {
            if (other.sslCheckEnabled != null)
                return false;
        }
        else if (!this.sslCheckEnabled.equals(other.sslCheckEnabled))
            return false;
        if (this.pagerdutyIntegrationKey == null) {
            if (other.pagerdutyIntegrationKey != null)
                return false;
        }
        else if (!this.pagerdutyIntegrationKey.equals(other.pagerdutyIntegrationKey))
            return false;
        if (this.latencyHistoryEnabled == null) {
            if (other.latencyHistoryEnabled != null)
                return false;
        }
        else if (!this.latencyHistoryEnabled.equals(other.latencyHistoryEnabled))
            return false;
        if (this.followRedirects == null) {
            if (other.followRedirects != null)
                return false;
        }
        else if (!this.followRedirects.equals(other.followRedirects))
            return false;
        if (this.forceNoCache == null) {
            if (other.forceNoCache != null)
                return false;
        }
        else if (!this.forceNoCache.equals(other.forceNoCache))
            return false;
        if (this.requestMethod == null) {
            if (other.requestMethod != null)
                return false;
        }
        else if (!this.requestMethod.equals(other.requestMethod))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.url == null) ? 0 : this.url.hashCode());
        result = prime * result + ((this.uptimeCheckInterval == null) ? 0 : this.uptimeCheckInterval.hashCode());
        result = prime * result + ((this.enabled == null) ? 0 : this.enabled.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.sslCheckEnabled == null) ? 0 : this.sslCheckEnabled.hashCode());
        result = prime * result + ((this.pagerdutyIntegrationKey == null) ? 0 : this.pagerdutyIntegrationKey.hashCode());
        result = prime * result + ((this.latencyHistoryEnabled == null) ? 0 : this.latencyHistoryEnabled.hashCode());
        result = prime * result + ((this.followRedirects == null) ? 0 : this.followRedirects.hashCode());
        result = prime * result + ((this.forceNoCache == null) ? 0 : this.forceNoCache.hashCode());
        result = prime * result + ((this.requestMethod == null) ? 0 : this.requestMethod.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Monitor (");

        sb.append(id);
        sb.append(", ").append(name);
        sb.append(", ").append(url);
        sb.append(", ").append(uptimeCheckInterval);
        sb.append(", ").append(enabled);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(sslCheckEnabled);
        sb.append(", ").append(pagerdutyIntegrationKey);
        sb.append(", ").append(latencyHistoryEnabled);
        sb.append(", ").append(followRedirects);
        sb.append(", ").append(forceNoCache);
        sb.append(", ").append(requestMethod);

        sb.append(")");
        return sb.toString();
    }
}
