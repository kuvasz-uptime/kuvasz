/*
 * This file is generated by jOOQ.
 */
package com.kuvaszuptime.kuvasz.tables.records;


import com.kuvaszuptime.kuvasz.tables.LatencyLog;

import java.time.OffsetDateTime;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "latency_log",
    uniqueConstraints = {
        @UniqueConstraint(name = "latency_log_pkey", columnNames = { "id" })
    },
    indexes = {
        @Index(name = "latency_log_latency_idx", columnList = "latency ASC"),
        @Index(name = "latency_log_monitor_idx", columnList = "monitor_id ASC")
    }
)
public class LatencyLogRecord extends UpdatableRecordImpl<LatencyLogRecord> implements Record4<Integer, Integer, Integer, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>latency_log.id</code>.
     */
    public LatencyLogRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>latency_log.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, precision = 32)
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>latency_log.monitor_id</code>.
     */
    public LatencyLogRecord setMonitorId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>latency_log.monitor_id</code>.
     */
    @Column(name = "monitor_id", nullable = false, precision = 32)
    @NotNull
    public Integer getMonitorId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>latency_log.latency</code>. Lateny in ms
     */
    public LatencyLogRecord setLatency(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>latency_log.latency</code>. Lateny in ms
     */
    @Column(name = "latency", nullable = false, precision = 32)
    @NotNull
    public Integer getLatency() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>latency_log.created_at</code>.
     */
    public LatencyLogRecord setCreatedAt(OffsetDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>latency_log.created_at</code>.
     */
    @Column(name = "created_at", nullable = false, precision = 6)
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Integer, Integer, OffsetDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return LatencyLog.LATENCY_LOG.ID;
    }

    @Override
    public Field<Integer> field2() {
        return LatencyLog.LATENCY_LOG.MONITOR_ID;
    }

    @Override
    public Field<Integer> field3() {
        return LatencyLog.LATENCY_LOG.LATENCY;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return LatencyLog.LATENCY_LOG.CREATED_AT;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getMonitorId();
    }

    @Override
    public Integer component3() {
        return getLatency();
    }

    @Override
    public OffsetDateTime component4() {
        return getCreatedAt();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getMonitorId();
    }

    @Override
    public Integer value3() {
        return getLatency();
    }

    @Override
    public OffsetDateTime value4() {
        return getCreatedAt();
    }

    @Override
    public LatencyLogRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public LatencyLogRecord value2(Integer value) {
        setMonitorId(value);
        return this;
    }

    @Override
    public LatencyLogRecord value3(Integer value) {
        setLatency(value);
        return this;
    }

    @Override
    public LatencyLogRecord value4(OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public LatencyLogRecord values(Integer value1, Integer value2, Integer value3, OffsetDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LatencyLogRecord
     */
    public LatencyLogRecord() {
        super(LatencyLog.LATENCY_LOG);
    }

    /**
     * Create a detached, initialised LatencyLogRecord
     */
    public LatencyLogRecord(Integer id, Integer monitorId, Integer latency, OffsetDateTime createdAt) {
        super(LatencyLog.LATENCY_LOG);

        setId(id);
        setMonitorId(monitorId);
        setLatency(latency);
        setCreatedAt(createdAt);
    }
}
