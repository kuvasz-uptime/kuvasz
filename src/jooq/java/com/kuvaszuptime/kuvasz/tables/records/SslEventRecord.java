/*
 * This file is generated by jOOQ.
 */
package com.kuvaszuptime.kuvasz.tables.records;


import com.kuvaszuptime.kuvasz.enums.SslStatus;
import com.kuvaszuptime.kuvasz.tables.SslEvent;

import java.time.OffsetDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SslEventRecord extends UpdatableRecordImpl<SslEventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ssl_event.id</code>.
     */
    public SslEventRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ssl_event.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>ssl_event.monitor_id</code>.
     */
    public SslEventRecord setMonitorId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ssl_event.monitor_id</code>.
     */
    public Integer getMonitorId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>ssl_event.status</code>. Status of the event
     */
    public SslEventRecord setStatus(SslStatus value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ssl_event.status</code>. Status of the event
     */
    public SslStatus getStatus() {
        return (SslStatus) get(2);
    }

    /**
     * Setter for <code>ssl_event.error</code>.
     */
    public SslEventRecord setError(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ssl_event.error</code>.
     */
    public String getError() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ssl_event.started_at</code>. The current event started
     * at
     */
    public SslEventRecord setStartedAt(OffsetDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ssl_event.started_at</code>. The current event started
     * at
     */
    public OffsetDateTime getStartedAt() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>ssl_event.ended_at</code>. The current event ended at
     */
    public SslEventRecord setEndedAt(OffsetDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ssl_event.ended_at</code>. The current event ended at
     */
    public OffsetDateTime getEndedAt() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>ssl_event.updated_at</code>.
     */
    public SslEventRecord setUpdatedAt(OffsetDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ssl_event.updated_at</code>.
     */
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SslEventRecord
     */
    public SslEventRecord() {
        super(SslEvent.SSL_EVENT);
    }

    /**
     * Create a detached, initialised SslEventRecord
     */
    public SslEventRecord(Integer id, Integer monitorId, SslStatus status, String error, OffsetDateTime startedAt, OffsetDateTime endedAt, OffsetDateTime updatedAt) {
        super(SslEvent.SSL_EVENT);

        setId(id);
        setMonitorId(monitorId);
        setStatus(status);
        setError(error);
        setStartedAt(startedAt);
        setEndedAt(endedAt);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }
}
