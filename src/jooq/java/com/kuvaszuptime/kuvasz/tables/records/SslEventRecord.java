/*
 * This file is generated by jOOQ.
 */
package com.kuvaszuptime.kuvasz.tables.records;


import com.kuvaszuptime.kuvasz.enums.SslStatus;
import com.kuvaszuptime.kuvasz.tables.SslEvent;

import java.time.OffsetDateTime;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "ssl_event",
    uniqueConstraints = {
        @UniqueConstraint(name = "ssl_event_pkey", columnNames = { "id" }),
        @UniqueConstraint(name = "ssl_event_key", columnNames = { "monitor_id", "status", "ended_at" })
    },
    indexes = {
        @Index(name = "ssl_event_ended_at_idx", columnList = "ended_at ASC"),
        @Index(name = "ssl_event_monitor_idx", columnList = "monitor_id ASC")
    }
)
public class SslEventRecord extends UpdatableRecordImpl<SslEventRecord> implements Record7<Integer, Integer, SslStatus, String, OffsetDateTime, OffsetDateTime, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ssl_event.id</code>.
     */
    public SslEventRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ssl_event.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, precision = 32)
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>ssl_event.monitor_id</code>.
     */
    public SslEventRecord setMonitorId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ssl_event.monitor_id</code>.
     */
    @Column(name = "monitor_id", nullable = false, precision = 32)
    @NotNull
    public Integer getMonitorId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>ssl_event.status</code>. Status of the event
     */
    public SslEventRecord setStatus(SslStatus value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ssl_event.status</code>. Status of the event
     */
    @Column(name = "status", nullable = false)
    @NotNull
    public SslStatus getStatus() {
        return (SslStatus) get(2);
    }

    /**
     * Setter for <code>ssl_event.error</code>.
     */
    public SslEventRecord setError(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ssl_event.error</code>.
     */
    @Column(name = "error")
    public String getError() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ssl_event.started_at</code>. The current event started at
     */
    public SslEventRecord setStartedAt(OffsetDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ssl_event.started_at</code>. The current event started at
     */
    @Column(name = "started_at", nullable = false, precision = 6)
    public OffsetDateTime getStartedAt() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>ssl_event.ended_at</code>. The current event ended at
     */
    public SslEventRecord setEndedAt(OffsetDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ssl_event.ended_at</code>. The current event ended at
     */
    @Column(name = "ended_at", precision = 6)
    public OffsetDateTime getEndedAt() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>ssl_event.updated_at</code>.
     */
    public SslEventRecord setUpdatedAt(OffsetDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ssl_event.updated_at</code>.
     */
    @Column(name = "updated_at", nullable = false, precision = 6)
    @NotNull
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, SslStatus, String, OffsetDateTime, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, Integer, SslStatus, String, OffsetDateTime, OffsetDateTime, OffsetDateTime> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return SslEvent.SSL_EVENT.ID;
    }

    @Override
    public Field<Integer> field2() {
        return SslEvent.SSL_EVENT.MONITOR_ID;
    }

    @Override
    public Field<SslStatus> field3() {
        return SslEvent.SSL_EVENT.STATUS;
    }

    @Override
    public Field<String> field4() {
        return SslEvent.SSL_EVENT.ERROR;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return SslEvent.SSL_EVENT.STARTED_AT;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return SslEvent.SSL_EVENT.ENDED_AT;
    }

    @Override
    public Field<OffsetDateTime> field7() {
        return SslEvent.SSL_EVENT.UPDATED_AT;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getMonitorId();
    }

    @Override
    public SslStatus component3() {
        return getStatus();
    }

    @Override
    public String component4() {
        return getError();
    }

    @Override
    public OffsetDateTime component5() {
        return getStartedAt();
    }

    @Override
    public OffsetDateTime component6() {
        return getEndedAt();
    }

    @Override
    public OffsetDateTime component7() {
        return getUpdatedAt();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getMonitorId();
    }

    @Override
    public SslStatus value3() {
        return getStatus();
    }

    @Override
    public String value4() {
        return getError();
    }

    @Override
    public OffsetDateTime value5() {
        return getStartedAt();
    }

    @Override
    public OffsetDateTime value6() {
        return getEndedAt();
    }

    @Override
    public OffsetDateTime value7() {
        return getUpdatedAt();
    }

    @Override
    public SslEventRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public SslEventRecord value2(Integer value) {
        setMonitorId(value);
        return this;
    }

    @Override
    public SslEventRecord value3(SslStatus value) {
        setStatus(value);
        return this;
    }

    @Override
    public SslEventRecord value4(String value) {
        setError(value);
        return this;
    }

    @Override
    public SslEventRecord value5(OffsetDateTime value) {
        setStartedAt(value);
        return this;
    }

    @Override
    public SslEventRecord value6(OffsetDateTime value) {
        setEndedAt(value);
        return this;
    }

    @Override
    public SslEventRecord value7(OffsetDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public SslEventRecord values(Integer value1, Integer value2, SslStatus value3, String value4, OffsetDateTime value5, OffsetDateTime value6, OffsetDateTime value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SslEventRecord
     */
    public SslEventRecord() {
        super(SslEvent.SSL_EVENT);
    }

    /**
     * Create a detached, initialised SslEventRecord
     */
    public SslEventRecord(Integer id, Integer monitorId, SslStatus status, String error, OffsetDateTime startedAt, OffsetDateTime endedAt, OffsetDateTime updatedAt) {
        super(SslEvent.SSL_EVENT);

        setId(id);
        setMonitorId(monitorId);
        setStatus(status);
        setError(error);
        setStartedAt(startedAt);
        setEndedAt(endedAt);
        setUpdatedAt(updatedAt);
    }
}
