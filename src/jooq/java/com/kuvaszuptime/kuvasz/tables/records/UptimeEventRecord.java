/*
 * This file is generated by jOOQ.
 */
package com.kuvaszuptime.kuvasz.tables.records;


import com.kuvaszuptime.kuvasz.enums.UptimeStatus;
import com.kuvaszuptime.kuvasz.tables.UptimeEvent;
import com.kuvaszuptime.kuvasz.tables.pojos.UptimeEventPojo;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Index;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;

import java.time.OffsetDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "uptime_event",
    uniqueConstraints = {
        @UniqueConstraint(name = "uptime_event_key", columnNames = { "monitor_id", "status", "ended_at" })
    },
    indexes = {
        @Index(name = "uptime_event_ended_at_idx", columnList = "ended_at ASC"),
        @Index(name = "uptime_event_monitor_idx", columnList = "monitor_id ASC")
    }
)
public class UptimeEventRecord extends UpdatableRecordImpl<UptimeEventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>uptime_event.id</code>.
     */
    public UptimeEventRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>uptime_event.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>uptime_event.monitor_id</code>.
     */
    public UptimeEventRecord setMonitorId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>uptime_event.monitor_id</code>.
     */
    @Column(name = "monitor_id", nullable = false)
    @NotNull
    public Integer getMonitorId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>uptime_event.status</code>. Status of the event
     */
    public UptimeEventRecord setStatus(UptimeStatus value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>uptime_event.status</code>. Status of the event
     */
    @Column(name = "status", nullable = false)
    @NotNull
    public UptimeStatus getStatus() {
        return (UptimeStatus) get(2);
    }

    /**
     * Setter for <code>uptime_event.error</code>.
     */
    public UptimeEventRecord setError(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>uptime_event.error</code>.
     */
    @Column(name = "error")
    public String getError() {
        return (String) get(3);
    }

    /**
     * Setter for <code>uptime_event.started_at</code>. The current event
     * started at
     */
    public UptimeEventRecord setStartedAt(OffsetDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>uptime_event.started_at</code>. The current event
     * started at
     */
    @Column(name = "started_at", nullable = false, precision = 6)
    public OffsetDateTime getStartedAt() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>uptime_event.ended_at</code>. The current event ended at
     */
    public UptimeEventRecord setEndedAt(OffsetDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>uptime_event.ended_at</code>. The current event ended at
     */
    @Column(name = "ended_at", precision = 6)
    public OffsetDateTime getEndedAt() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>uptime_event.updated_at</code>.
     */
    public UptimeEventRecord setUpdatedAt(OffsetDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>uptime_event.updated_at</code>.
     */
    @Column(name = "updated_at", nullable = false, precision = 6)
    @NotNull
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UptimeEventRecord
     */
    public UptimeEventRecord() {
        super(UptimeEvent.UPTIME_EVENT);
    }

    /**
     * Create a detached, initialised UptimeEventRecord
     */
    public UptimeEventRecord(Integer id, Integer monitorId, UptimeStatus status, String error, OffsetDateTime startedAt, OffsetDateTime endedAt, OffsetDateTime updatedAt) {
        super(UptimeEvent.UPTIME_EVENT);

        setId(id);
        setMonitorId(monitorId);
        setStatus(status);
        setError(error);
        setStartedAt(startedAt);
        setEndedAt(endedAt);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UptimeEventRecord
     */
    public UptimeEventRecord(UptimeEventPojo value) {
        super(UptimeEvent.UPTIME_EVENT);

        if (value != null) {
            setId(value.getId());
            setMonitorId(value.getMonitorId());
            setStatus(value.getStatus());
            setError(value.getError());
            setStartedAt(value.getStartedAt());
            setEndedAt(value.getEndedAt());
            setUpdatedAt(value.getUpdatedAt());
            resetChangedOnNotNull();
        }
    }
}
