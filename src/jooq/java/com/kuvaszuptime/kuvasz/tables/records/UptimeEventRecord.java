/*
 * This file is generated by jOOQ.
 */
package com.kuvaszuptime.kuvasz.tables.records;


import com.kuvaszuptime.kuvasz.enums.UptimeStatus;
import com.kuvaszuptime.kuvasz.tables.UptimeEvent;

import java.time.OffsetDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UptimeEventRecord extends UpdatableRecordImpl<UptimeEventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>kuvasz.uptime_event.id</code>.
     */
    public UptimeEventRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>kuvasz.uptime_event.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>kuvasz.uptime_event.monitor_id</code>.
     */
    public UptimeEventRecord setMonitorId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>kuvasz.uptime_event.monitor_id</code>.
     */
    public Long getMonitorId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>kuvasz.uptime_event.status</code>. Status of the event
     */
    public UptimeEventRecord setStatus(UptimeStatus value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>kuvasz.uptime_event.status</code>. Status of the event
     */
    public UptimeStatus getStatus() {
        return (UptimeStatus) get(2);
    }

    /**
     * Setter for <code>kuvasz.uptime_event.error</code>.
     */
    public UptimeEventRecord setError(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>kuvasz.uptime_event.error</code>.
     */
    public String getError() {
        return (String) get(3);
    }

    /**
     * Setter for <code>kuvasz.uptime_event.started_at</code>. The current event
     * started at
     */
    public UptimeEventRecord setStartedAt(OffsetDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>kuvasz.uptime_event.started_at</code>. The current event
     * started at
     */
    public OffsetDateTime getStartedAt() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>kuvasz.uptime_event.ended_at</code>. The current event
     * ended at
     */
    public UptimeEventRecord setEndedAt(OffsetDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>kuvasz.uptime_event.ended_at</code>. The current event
     * ended at
     */
    public OffsetDateTime getEndedAt() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>kuvasz.uptime_event.updated_at</code>.
     */
    public UptimeEventRecord setUpdatedAt(OffsetDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>kuvasz.uptime_event.updated_at</code>.
     */
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UptimeEventRecord
     */
    public UptimeEventRecord() {
        super(UptimeEvent.UPTIME_EVENT);
    }

    /**
     * Create a detached, initialised UptimeEventRecord
     */
    public UptimeEventRecord(Long id, Long monitorId, UptimeStatus status, String error, OffsetDateTime startedAt, OffsetDateTime endedAt, OffsetDateTime updatedAt) {
        super(UptimeEvent.UPTIME_EVENT);

        setId(id);
        setMonitorId(monitorId);
        setStatus(status);
        setError(error);
        setStartedAt(startedAt);
        setEndedAt(endedAt);
        setUpdatedAt(updatedAt);
        resetTouchedOnNotNull();
    }

    /**
     * Create a detached, initialised UptimeEventRecord
     */
    public UptimeEventRecord(com.kuvaszuptime.kuvasz.tables.pojos.UptimeEvent value) {
        super(UptimeEvent.UPTIME_EVENT);

        if (value != null) {
            setId(value.getId());
            setMonitorId(value.getMonitorId());
            setStatus(value.getStatus());
            setError(value.getError());
            setStartedAt(value.getStartedAt());
            setEndedAt(value.getEndedAt());
            setUpdatedAt(value.getUpdatedAt());
            resetTouchedOnNotNull();
        }
    }
}
