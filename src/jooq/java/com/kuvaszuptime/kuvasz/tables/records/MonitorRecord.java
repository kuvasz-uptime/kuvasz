/*
 * This file is generated by jOOQ.
 */
package com.kuvaszuptime.kuvasz.tables.records;


import com.kuvaszuptime.kuvasz.enums.HttpMethod;
import com.kuvaszuptime.kuvasz.tables.Monitor;

import java.time.OffsetDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MonitorRecord extends UpdatableRecordImpl<MonitorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>monitor.id</code>.
     */
    public MonitorRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>monitor.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>monitor.name</code>. Monitor's name
     */
    public MonitorRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>monitor.name</code>. Monitor's name
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>monitor.url</code>. URL to check
     */
    public MonitorRecord setUrl(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>monitor.url</code>. URL to check
     */
    public String getUrl() {
        return (String) get(2);
    }

    /**
     * Setter for <code>monitor.uptime_check_interval</code>. Uptime checking
     * interval in seconds
     */
    public MonitorRecord setUptimeCheckInterval(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>monitor.uptime_check_interval</code>. Uptime checking
     * interval in seconds
     */
    public Integer getUptimeCheckInterval() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>monitor.enabled</code>. Flag to toggle the monitor
     */
    public MonitorRecord setEnabled(Boolean value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>monitor.enabled</code>. Flag to toggle the monitor
     */
    public Boolean getEnabled() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>monitor.created_at</code>.
     */
    public MonitorRecord setCreatedAt(OffsetDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>monitor.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>monitor.updated_at</code>.
     */
    public MonitorRecord setUpdatedAt(OffsetDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>monitor.updated_at</code>.
     */
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(6);
    }

    /**
     * Setter for <code>monitor.ssl_check_enabled</code>.
     */
    public MonitorRecord setSslCheckEnabled(Boolean value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>monitor.ssl_check_enabled</code>.
     */
    public Boolean getSslCheckEnabled() {
        return (Boolean) get(7);
    }

    /**
     * Setter for <code>monitor.pagerduty_integration_key</code>.
     */
    public MonitorRecord setPagerdutyIntegrationKey(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>monitor.pagerduty_integration_key</code>.
     */
    public String getPagerdutyIntegrationKey() {
        return (String) get(8);
    }

    /**
     * Setter for <code>monitor.latency_history_enabled</code>.
     */
    public MonitorRecord setLatencyHistoryEnabled(Boolean value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>monitor.latency_history_enabled</code>.
     */
    public Boolean getLatencyHistoryEnabled() {
        return (Boolean) get(9);
    }

    /**
     * Setter for <code>monitor.follow_redirects</code>.
     */
    public MonitorRecord setFollowRedirects(Boolean value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>monitor.follow_redirects</code>.
     */
    public Boolean getFollowRedirects() {
        return (Boolean) get(10);
    }

    /**
     * Setter for <code>monitor.force_no_cache</code>.
     */
    public MonitorRecord setForceNoCache(Boolean value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>monitor.force_no_cache</code>.
     */
    public Boolean getForceNoCache() {
        return (Boolean) get(11);
    }

    /**
     * Setter for <code>monitor.request_method</code>.
     */
    public MonitorRecord setRequestMethod(HttpMethod value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>monitor.request_method</code>.
     */
    public HttpMethod getRequestMethod() {
        return (HttpMethod) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MonitorRecord
     */
    public MonitorRecord() {
        super(Monitor.MONITOR);
    }

    /**
     * Create a detached, initialised MonitorRecord
     */
    public MonitorRecord(Integer id, String name, String url, Integer uptimeCheckInterval, Boolean enabled, OffsetDateTime createdAt, OffsetDateTime updatedAt, Boolean sslCheckEnabled, String pagerdutyIntegrationKey, Boolean latencyHistoryEnabled, Boolean followRedirects, Boolean forceNoCache, HttpMethod requestMethod) {
        super(Monitor.MONITOR);

        setId(id);
        setName(name);
        setUrl(url);
        setUptimeCheckInterval(uptimeCheckInterval);
        setEnabled(enabled);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setSslCheckEnabled(sslCheckEnabled);
        setPagerdutyIntegrationKey(pagerdutyIntegrationKey);
        setLatencyHistoryEnabled(latencyHistoryEnabled);
        setFollowRedirects(followRedirects);
        setForceNoCache(forceNoCache);
        setRequestMethod(requestMethod);
        resetChangedOnNotNull();
    }
}
