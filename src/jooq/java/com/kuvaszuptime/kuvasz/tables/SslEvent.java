/*
 * This file is generated by jOOQ.
 */
package com.kuvaszuptime.kuvasz.tables;


import com.kuvaszuptime.kuvasz.Indexes;
import com.kuvaszuptime.kuvasz.Keys;
import com.kuvaszuptime.kuvasz.Kuvasz;
import com.kuvaszuptime.kuvasz.enums.SslStatus;
import com.kuvaszuptime.kuvasz.tables.Monitor.MonitorPath;
import com.kuvaszuptime.kuvasz.tables.records.SslEventRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SslEvent extends TableImpl<SslEventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>kuvasz.ssl_event</code>
     */
    public static final SslEvent SSL_EVENT = new SslEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SslEventRecord> getRecordType() {
        return SslEventRecord.class;
    }

    /**
     * The column <code>kuvasz.ssl_event.id</code>.
     */
    public final TableField<SslEventRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>kuvasz.ssl_event.monitor_id</code>.
     */
    public final TableField<SslEventRecord, Long> MONITOR_ID = createField(DSL.name("monitor_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>kuvasz.ssl_event.status</code>. Status of the event
     */
    public final TableField<SslEventRecord, SslStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(SslStatus.class), this, "Status of the event");

    /**
     * The column <code>kuvasz.ssl_event.error</code>.
     */
    public final TableField<SslEventRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>kuvasz.ssl_event.started_at</code>. The current event
     * started at
     */
    public final TableField<SslEventRecord, OffsetDateTime> STARTED_AT = createField(DSL.name("started_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "The current event started at");

    /**
     * The column <code>kuvasz.ssl_event.ended_at</code>. The current event
     * ended at
     */
    public final TableField<SslEventRecord, OffsetDateTime> ENDED_AT = createField(DSL.name("ended_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "The current event ended at");

    /**
     * The column <code>kuvasz.ssl_event.updated_at</code>.
     */
    public final TableField<SslEventRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private SslEvent(Name alias, Table<SslEventRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SslEvent(Name alias, Table<SslEventRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>kuvasz.ssl_event</code> table reference
     */
    public SslEvent(String alias) {
        this(DSL.name(alias), SSL_EVENT);
    }

    /**
     * Create an aliased <code>kuvasz.ssl_event</code> table reference
     */
    public SslEvent(Name alias) {
        this(alias, SSL_EVENT);
    }

    /**
     * Create a <code>kuvasz.ssl_event</code> table reference
     */
    public SslEvent() {
        this(DSL.name("ssl_event"), null);
    }

    public <O extends Record> SslEvent(Table<O> path, ForeignKey<O, SslEventRecord> childPath, InverseForeignKey<O, SslEventRecord> parentPath) {
        super(path, childPath, parentPath, SSL_EVENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SslEventPath extends SslEvent implements Path<SslEventRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SslEventPath(Table<O> path, ForeignKey<O, SslEventRecord> childPath, InverseForeignKey<O, SslEventRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SslEventPath(Name alias, Table<SslEventRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SslEventPath as(String alias) {
            return new SslEventPath(DSL.name(alias), this);
        }

        @Override
        public SslEventPath as(Name alias) {
            return new SslEventPath(alias, this);
        }

        @Override
        public SslEventPath as(Table<?> alias) {
            return new SslEventPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Kuvasz.KUVASZ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SSL_EVENT_ENDED_AT_IDX, Indexes.SSL_EVENT_MONITOR_IDX);
    }

    @Override
    public Identity<SslEventRecord, Long> getIdentity() {
        return (Identity<SslEventRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SslEventRecord> getPrimaryKey() {
        return Keys.SSL_EVENT_PKEY;
    }

    @Override
    public List<UniqueKey<SslEventRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SSL_EVENT_KEY);
    }

    @Override
    public List<ForeignKey<SslEventRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SSL_EVENT__SSL_EVENT_MONITOR_ID_FKEY);
    }

    private transient MonitorPath _monitor;

    /**
     * Get the implicit join path to the <code>kuvasz.monitor</code> table.
     */
    public MonitorPath monitor() {
        if (_monitor == null)
            _monitor = new MonitorPath(this, Keys.SSL_EVENT__SSL_EVENT_MONITOR_ID_FKEY, null);

        return _monitor;
    }

    @Override
    public SslEvent as(String alias) {
        return new SslEvent(DSL.name(alias), this);
    }

    @Override
    public SslEvent as(Name alias) {
        return new SslEvent(alias, this);
    }

    @Override
    public SslEvent as(Table<?> alias) {
        return new SslEvent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SslEvent rename(String name) {
        return new SslEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SslEvent rename(Name name) {
        return new SslEvent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SslEvent rename(Table<?> name) {
        return new SslEvent(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SslEvent where(Condition condition) {
        return new SslEvent(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SslEvent where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SslEvent where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SslEvent where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SslEvent where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SslEvent where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SslEvent where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SslEvent where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SslEvent whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SslEvent whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
