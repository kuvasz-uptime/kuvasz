/*
 * This file is generated by jOOQ.
 */
package com.kuvaszuptime.kuvasz.tables;


import com.kuvaszuptime.kuvasz.DefaultSchema;
import com.kuvaszuptime.kuvasz.Indexes;
import com.kuvaszuptime.kuvasz.Keys;
import com.kuvaszuptime.kuvasz.enums.SslStatus;
import com.kuvaszuptime.kuvasz.tables.records.SslEventRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SslEvent extends TableImpl<SslEventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ssl_event</code>
     */
    public static final SslEvent SSL_EVENT = new SslEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SslEventRecord> getRecordType() {
        return SslEventRecord.class;
    }

    /**
     * The column <code>ssl_event.id</code>.
     */
    public final TableField<SslEventRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ssl_event.monitor_id</code>.
     */
    public final TableField<SslEventRecord, Integer> MONITOR_ID = createField(DSL.name("monitor_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ssl_event.status</code>. Status of the event
     */
    public final TableField<SslEventRecord, SslStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.kuvaszuptime.kuvasz.enums.SslStatus.class), this, "Status of the event");

    /**
     * The column <code>ssl_event.error</code>.
     */
    public final TableField<SslEventRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ssl_event.started_at</code>. The current event started
     * at
     */
    public final TableField<SslEventRecord, OffsetDateTime> STARTED_AT = createField(DSL.name("started_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "The current event started at");

    /**
     * The column <code>ssl_event.ended_at</code>. The current event ended at
     */
    public final TableField<SslEventRecord, OffsetDateTime> ENDED_AT = createField(DSL.name("ended_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "The current event ended at");

    /**
     * The column <code>ssl_event.updated_at</code>.
     */
    public final TableField<SslEventRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private SslEvent(Name alias, Table<SslEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private SslEvent(Name alias, Table<SslEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ssl_event</code> table reference
     */
    public SslEvent(String alias) {
        this(DSL.name(alias), SSL_EVENT);
    }

    /**
     * Create an aliased <code>ssl_event</code> table reference
     */
    public SslEvent(Name alias) {
        this(alias, SSL_EVENT);
    }

    /**
     * Create a <code>ssl_event</code> table reference
     */
    public SslEvent() {
        this(DSL.name("ssl_event"), null);
    }

    public <O extends Record> SslEvent(Table<O> child, ForeignKey<O, SslEventRecord> key) {
        super(child, key, SSL_EVENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SSL_EVENT_ENDED_AT_IDX, Indexes.SSL_EVENT_MONITOR_IDX);
    }

    @Override
    public Identity<SslEventRecord, Integer> getIdentity() {
        return (Identity<SslEventRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SslEventRecord> getPrimaryKey() {
        return Keys.SSL_EVENT_PKEY;
    }

    @Override
    public List<UniqueKey<SslEventRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SSL_EVENT_KEY);
    }

    @Override
    public List<ForeignKey<SslEventRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SSL_EVENT__SSL_EVENT_MONITOR_ID_FKEY);
    }

    private transient Monitor _monitor;

    /**
     * Get the implicit join path to the <code>kuvasz.monitor</code> table.
     */
    public Monitor monitor() {
        if (_monitor == null)
            _monitor = new Monitor(this, Keys.SSL_EVENT__SSL_EVENT_MONITOR_ID_FKEY);

        return _monitor;
    }

    @Override
    public SslEvent as(String alias) {
        return new SslEvent(DSL.name(alias), this);
    }

    @Override
    public SslEvent as(Name alias) {
        return new SslEvent(alias, this);
    }

    @Override
    public SslEvent as(Table<?> alias) {
        return new SslEvent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SslEvent rename(String name) {
        return new SslEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SslEvent rename(Name name) {
        return new SslEvent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SslEvent rename(Table<?> name) {
        return new SslEvent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, SslStatus, String, OffsetDateTime, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super Integer, ? super SslStatus, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super Integer, ? super SslStatus, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
