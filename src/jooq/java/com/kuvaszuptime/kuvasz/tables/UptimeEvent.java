/*
 * This file is generated by jOOQ.
 */
package com.kuvaszuptime.kuvasz.tables;


import com.kuvaszuptime.kuvasz.Indexes;
import com.kuvaszuptime.kuvasz.Keys;
import com.kuvaszuptime.kuvasz.Kuvasz;
import com.kuvaszuptime.kuvasz.enums.UptimeStatus;
import com.kuvaszuptime.kuvasz.tables.Monitor.MonitorPath;
import com.kuvaszuptime.kuvasz.tables.records.UptimeEventRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UptimeEvent extends TableImpl<UptimeEventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>kuvasz.uptime_event</code>
     */
    public static final UptimeEvent UPTIME_EVENT = new UptimeEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UptimeEventRecord> getRecordType() {
        return UptimeEventRecord.class;
    }

    /**
     * The column <code>kuvasz.uptime_event.id</code>.
     */
    public final TableField<UptimeEventRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>kuvasz.uptime_event.monitor_id</code>.
     */
    public final TableField<UptimeEventRecord, Integer> MONITOR_ID = createField(DSL.name("monitor_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>kuvasz.uptime_event.status</code>. Status of the event
     */
    public final TableField<UptimeEventRecord, UptimeStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(UptimeStatus.class), this, "Status of the event");

    /**
     * The column <code>kuvasz.uptime_event.error</code>.
     */
    public final TableField<UptimeEventRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>kuvasz.uptime_event.started_at</code>. The current event
     * started at
     */
    public final TableField<UptimeEventRecord, OffsetDateTime> STARTED_AT = createField(DSL.name("started_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "The current event started at");

    /**
     * The column <code>kuvasz.uptime_event.ended_at</code>. The current event
     * ended at
     */
    public final TableField<UptimeEventRecord, OffsetDateTime> ENDED_AT = createField(DSL.name("ended_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "The current event ended at");

    /**
     * The column <code>kuvasz.uptime_event.updated_at</code>.
     */
    public final TableField<UptimeEventRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private UptimeEvent(Name alias, Table<UptimeEventRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UptimeEvent(Name alias, Table<UptimeEventRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>kuvasz.uptime_event</code> table reference
     */
    public UptimeEvent(String alias) {
        this(DSL.name(alias), UPTIME_EVENT);
    }

    /**
     * Create an aliased <code>kuvasz.uptime_event</code> table reference
     */
    public UptimeEvent(Name alias) {
        this(alias, UPTIME_EVENT);
    }

    /**
     * Create a <code>kuvasz.uptime_event</code> table reference
     */
    public UptimeEvent() {
        this(DSL.name("uptime_event"), null);
    }

    public <O extends Record> UptimeEvent(Table<O> path, ForeignKey<O, UptimeEventRecord> childPath, InverseForeignKey<O, UptimeEventRecord> parentPath) {
        super(path, childPath, parentPath, UPTIME_EVENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UptimeEventPath extends UptimeEvent implements Path<UptimeEventRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UptimeEventPath(Table<O> path, ForeignKey<O, UptimeEventRecord> childPath, InverseForeignKey<O, UptimeEventRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UptimeEventPath(Name alias, Table<UptimeEventRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UptimeEventPath as(String alias) {
            return new UptimeEventPath(DSL.name(alias), this);
        }

        @Override
        public UptimeEventPath as(Name alias) {
            return new UptimeEventPath(alias, this);
        }

        @Override
        public UptimeEventPath as(Table<?> alias) {
            return new UptimeEventPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Kuvasz.KUVASZ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.UPTIME_EVENT_ENDED_AT_IDX, Indexes.UPTIME_EVENT_MONITOR_IDX);
    }

    @Override
    public Identity<UptimeEventRecord, Integer> getIdentity() {
        return (Identity<UptimeEventRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UptimeEventRecord> getPrimaryKey() {
        return Keys.UPTIME_EVENT_PKEY;
    }

    @Override
    public List<UniqueKey<UptimeEventRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UPTIME_EVENT_KEY);
    }

    @Override
    public List<ForeignKey<UptimeEventRecord, ?>> getReferences() {
        return Arrays.asList(Keys.UPTIME_EVENT__UPTIME_EVENT_MONITOR_ID_FKEY);
    }

    private transient MonitorPath _monitor;

    /**
     * Get the implicit join path to the <code>kuvasz.monitor</code> table.
     */
    public MonitorPath monitor() {
        if (_monitor == null)
            _monitor = new MonitorPath(this, Keys.UPTIME_EVENT__UPTIME_EVENT_MONITOR_ID_FKEY, null);

        return _monitor;
    }

    @Override
    public UptimeEvent as(String alias) {
        return new UptimeEvent(DSL.name(alias), this);
    }

    @Override
    public UptimeEvent as(Name alias) {
        return new UptimeEvent(alias, this);
    }

    @Override
    public UptimeEvent as(Table<?> alias) {
        return new UptimeEvent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UptimeEvent rename(String name) {
        return new UptimeEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UptimeEvent rename(Name name) {
        return new UptimeEvent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UptimeEvent rename(Table<?> name) {
        return new UptimeEvent(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UptimeEvent where(Condition condition) {
        return new UptimeEvent(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UptimeEvent where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UptimeEvent where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UptimeEvent where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UptimeEvent where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UptimeEvent where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UptimeEvent where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UptimeEvent where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UptimeEvent whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UptimeEvent whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
