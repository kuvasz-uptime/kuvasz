/*
 * This file is generated by jOOQ.
 */
package com.kuvaszuptime.kuvasz.tables.daos;


import com.kuvaszuptime.kuvasz.enums.HttpMethod;
import com.kuvaszuptime.kuvasz.tables.Monitor;
import com.kuvaszuptime.kuvasz.tables.pojos.MonitorPojo;
import com.kuvaszuptime.kuvasz.tables.records.MonitorRecord;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MonitorDao extends DAOImpl<MonitorRecord, MonitorPojo, Integer> {

    /**
     * Create a new MonitorDao without any configuration
     */
    public MonitorDao() {
        super(Monitor.MONITOR, MonitorPojo.class);
    }

    /**
     * Create a new MonitorDao with an attached configuration
     */
    public MonitorDao(Configuration configuration) {
        super(Monitor.MONITOR, MonitorPojo.class, configuration);
    }

    @Override
    public Integer getId(MonitorPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<MonitorPojo> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Monitor.MONITOR.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<MonitorPojo> fetchById(Integer... values) {
        return fetch(Monitor.MONITOR.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public MonitorPojo fetchOneById(Integer value) {
        return fetchOne(Monitor.MONITOR.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<MonitorPojo> fetchOptionalById(Integer value) {
        return fetchOptional(Monitor.MONITOR.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<MonitorPojo> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Monitor.MONITOR.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<MonitorPojo> fetchByName(String... values) {
        return fetch(Monitor.MONITOR.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public MonitorPojo fetchOneByName(String value) {
        return fetchOne(Monitor.MONITOR.NAME, value);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public Optional<MonitorPojo> fetchOptionalByName(String value) {
        return fetchOptional(Monitor.MONITOR.NAME, value);
    }

    /**
     * Fetch records that have <code>url BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<MonitorPojo> fetchRangeOfUrl(String lowerInclusive, String upperInclusive) {
        return fetchRange(Monitor.MONITOR.URL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>url IN (values)</code>
     */
    public List<MonitorPojo> fetchByUrl(String... values) {
        return fetch(Monitor.MONITOR.URL, values);
    }

    /**
     * Fetch records that have <code>uptime_check_interval BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<MonitorPojo> fetchRangeOfUptimeCheckInterval(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Monitor.MONITOR.UPTIME_CHECK_INTERVAL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uptime_check_interval IN (values)</code>
     */
    public List<MonitorPojo> fetchByUptimeCheckInterval(Integer... values) {
        return fetch(Monitor.MONITOR.UPTIME_CHECK_INTERVAL, values);
    }

    /**
     * Fetch records that have <code>enabled BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<MonitorPojo> fetchRangeOfEnabled(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Monitor.MONITOR.ENABLED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>enabled IN (values)</code>
     */
    public List<MonitorPojo> fetchByEnabled(Boolean... values) {
        return fetch(Monitor.MONITOR.ENABLED, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<MonitorPojo> fetchRangeOfCreatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(Monitor.MONITOR.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<MonitorPojo> fetchByCreatedAt(OffsetDateTime... values) {
        return fetch(Monitor.MONITOR.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<MonitorPojo> fetchRangeOfUpdatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(Monitor.MONITOR.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<MonitorPojo> fetchByUpdatedAt(OffsetDateTime... values) {
        return fetch(Monitor.MONITOR.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>ssl_check_enabled BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<MonitorPojo> fetchRangeOfSslCheckEnabled(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Monitor.MONITOR.SSL_CHECK_ENABLED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ssl_check_enabled IN (values)</code>
     */
    public List<MonitorPojo> fetchBySslCheckEnabled(Boolean... values) {
        return fetch(Monitor.MONITOR.SSL_CHECK_ENABLED, values);
    }

    /**
     * Fetch records that have <code>pagerduty_integration_key BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<MonitorPojo> fetchRangeOfPagerdutyIntegrationKey(String lowerInclusive, String upperInclusive) {
        return fetchRange(Monitor.MONITOR.PAGERDUTY_INTEGRATION_KEY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>pagerduty_integration_key IN
     * (values)</code>
     */
    public List<MonitorPojo> fetchByPagerdutyIntegrationKey(String... values) {
        return fetch(Monitor.MONITOR.PAGERDUTY_INTEGRATION_KEY, values);
    }

    /**
     * Fetch records that have <code>latency_history_enabled BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<MonitorPojo> fetchRangeOfLatencyHistoryEnabled(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Monitor.MONITOR.LATENCY_HISTORY_ENABLED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>latency_history_enabled IN (values)</code>
     */
    public List<MonitorPojo> fetchByLatencyHistoryEnabled(Boolean... values) {
        return fetch(Monitor.MONITOR.LATENCY_HISTORY_ENABLED, values);
    }

    /**
     * Fetch records that have <code>follow_redirects BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<MonitorPojo> fetchRangeOfFollowRedirects(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Monitor.MONITOR.FOLLOW_REDIRECTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>follow_redirects IN (values)</code>
     */
    public List<MonitorPojo> fetchByFollowRedirects(Boolean... values) {
        return fetch(Monitor.MONITOR.FOLLOW_REDIRECTS, values);
    }

    /**
     * Fetch records that have <code>force_no_cache BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<MonitorPojo> fetchRangeOfForceNoCache(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Monitor.MONITOR.FORCE_NO_CACHE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>force_no_cache IN (values)</code>
     */
    public List<MonitorPojo> fetchByForceNoCache(Boolean... values) {
        return fetch(Monitor.MONITOR.FORCE_NO_CACHE, values);
    }

    /**
     * Fetch records that have <code>request_method BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<MonitorPojo> fetchRangeOfRequestMethod(HttpMethod lowerInclusive, HttpMethod upperInclusive) {
        return fetchRange(Monitor.MONITOR.REQUEST_METHOD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>request_method IN (values)</code>
     */
    public List<MonitorPojo> fetchByRequestMethod(HttpMethod... values) {
        return fetch(Monitor.MONITOR.REQUEST_METHOD, values);
    }
}
