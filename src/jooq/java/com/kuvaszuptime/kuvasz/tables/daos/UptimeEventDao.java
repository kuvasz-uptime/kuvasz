/*
 * This file is generated by jOOQ.
 */
package com.kuvaszuptime.kuvasz.tables.daos;


import com.kuvaszuptime.kuvasz.enums.UptimeStatus;
import com.kuvaszuptime.kuvasz.tables.UptimeEvent;
import com.kuvaszuptime.kuvasz.tables.pojos.UptimeEventPojo;
import com.kuvaszuptime.kuvasz.tables.records.UptimeEventRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UptimeEventDao extends DAOImpl<UptimeEventRecord, UptimeEventPojo, Integer> {

    /**
     * Create a new UptimeEventDao without any configuration
     */
    public UptimeEventDao() {
        super(UptimeEvent.UPTIME_EVENT, UptimeEventPojo.class);
    }

    /**
     * Create a new UptimeEventDao with an attached configuration
     */
    public UptimeEventDao(Configuration configuration) {
        super(UptimeEvent.UPTIME_EVENT, UptimeEventPojo.class, configuration);
    }

    @Override
    public Integer getId(UptimeEventPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UptimeEventPojo> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UptimeEvent.UPTIME_EVENT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<UptimeEventPojo> fetchById(Integer... values) {
        return fetch(UptimeEvent.UPTIME_EVENT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public UptimeEventPojo fetchOneById(Integer value) {
        return fetchOne(UptimeEvent.UPTIME_EVENT.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<UptimeEventPojo> fetchOptionalById(Integer value) {
        return fetchOptional(UptimeEvent.UPTIME_EVENT.ID, value);
    }

    /**
     * Fetch records that have <code>monitor_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UptimeEventPojo> fetchRangeOfMonitorId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UptimeEvent.UPTIME_EVENT.MONITOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>monitor_id IN (values)</code>
     */
    public List<UptimeEventPojo> fetchByMonitorId(Integer... values) {
        return fetch(UptimeEvent.UPTIME_EVENT.MONITOR_ID, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UptimeEventPojo> fetchRangeOfStatus(UptimeStatus lowerInclusive, UptimeStatus upperInclusive) {
        return fetchRange(UptimeEvent.UPTIME_EVENT.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<UptimeEventPojo> fetchByStatus(UptimeStatus... values) {
        return fetch(UptimeEvent.UPTIME_EVENT.STATUS, values);
    }

    /**
     * Fetch records that have <code>error BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UptimeEventPojo> fetchRangeOfError(String lowerInclusive, String upperInclusive) {
        return fetchRange(UptimeEvent.UPTIME_EVENT.ERROR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>error IN (values)</code>
     */
    public List<UptimeEventPojo> fetchByError(String... values) {
        return fetch(UptimeEvent.UPTIME_EVENT.ERROR, values);
    }

    /**
     * Fetch records that have <code>started_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UptimeEventPojo> fetchRangeOfStartedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(UptimeEvent.UPTIME_EVENT.STARTED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>started_at IN (values)</code>
     */
    public List<UptimeEventPojo> fetchByStartedAt(OffsetDateTime... values) {
        return fetch(UptimeEvent.UPTIME_EVENT.STARTED_AT, values);
    }

    /**
     * Fetch records that have <code>ended_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UptimeEventPojo> fetchRangeOfEndedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(UptimeEvent.UPTIME_EVENT.ENDED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ended_at IN (values)</code>
     */
    public List<UptimeEventPojo> fetchByEndedAt(OffsetDateTime... values) {
        return fetch(UptimeEvent.UPTIME_EVENT.ENDED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UptimeEventPojo> fetchRangeOfUpdatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(UptimeEvent.UPTIME_EVENT.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<UptimeEventPojo> fetchByUpdatedAt(OffsetDateTime... values) {
        return fetch(UptimeEvent.UPTIME_EVENT.UPDATED_AT, values);
    }
}
